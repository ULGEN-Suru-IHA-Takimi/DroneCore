#!/usr/bin/env python3

import serial
import time
import threading
import json
from collections import deque
import platform

# --- Global YapÄ±landÄ±rma ve Kuyruklar iÃ§in Sabitler ---
# Bu sabitler, programÄ±n genel ayarlarÄ±nÄ± belirler.
# AT modunda Ã§oÄŸu XBee varsayÄ±lan olarak 9600 baud ile baÅŸlar.
# EÄŸer XBee'nizin baud hÄ±zÄ±nÄ± XCTU ile deÄŸiÅŸtirdiyseniz, burayÄ± gÃ¼ncelleyin.
DEFAULT_BAUD_RATE = 9600 

# Veri gÃ¶nderme ve kuyruk yÃ¶netimi iÃ§in ayarlar
SEND_INTERVAL = 1  # Saniyede 10 kez gÃ¶nderim (1/0.1)
QUEUE_RETENTION = 10 # Saniye, kuyrukta tutulma sÃ¼resi

# --- XBeePackage SÄ±nÄ±fÄ± ---
# Kendi Ã¶zel paket formatÄ±nÄ±z burada tanÄ±mlÄ±.
class XBeePackage:
    '''
    XBee Ã¼zerinden gÃ¶nderilecek/alÄ±nacak paket tanÄ±mlamasÄ±
    '''
    def __init__(self, package_type: str, # t paket tipi
                 sender: str,             # s gÃ¶nderen
                 params: dict = None):    # p parametreler
        
        self.package_type = package_type
        self.sender = sender
        self.params = params if params is not None else {}

    def to_json(self):
        """
        Paketi JSON formatÄ±nda bir Python sÃ¶zlÃ¼ÄŸÃ¼ne dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
        """
        data = {
            "t": self.package_type,
            "s": self.sender,
        }
        if self.params:
            data["p"] = self.params
        return data

    def __bytes__(self):
        """
        Paketi JSON string'ine ve ardÄ±ndan UTF-8 bayt dizisine dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
        """
        json_data = json.dumps(self.to_json())
        encoded_data = json_data.encode('utf-8')
        if len(encoded_data) > 70: # Bu deÄŸer XBee modelinize gÃ¶re deÄŸiÅŸebilir (genelde 72-100 byte)
            print(f"UyarÄ±: GÃ¶nderilen paket boyutu ({len(encoded_data)} bayt) XBee limitini aÅŸabilir.")
        return encoded_data
    
    @classmethod
    def from_bytes(cls, byte_data):
        """
        Bayt dizisinden XBeePackage nesnesi oluÅŸturur.
        """
        decoded_data = byte_data.decode('utf-8')
        json_data = json.loads(decoded_data)
        
        package_type = json_data.get("t")
        sender = json_data.get("s")
        params = json_data.get("p", {})
        
        return cls(package_type, sender, params)

# --- Global Seri Port Nesnesi ve Kuyruklar ---
# Seri port baÄŸlantÄ±sÄ±nÄ± yÃ¶netecek global nesne.
ser = None 

# Gelen ve giden sinyalleri depolamak iÃ§in thread-safe kuyruk
signal_queue = deque()  
queue_lock = threading.Lock()

# --- Veri Okuma Fonksiyonu (AyrÄ± bir thread'de Ã§alÄ±ÅŸÄ±r) ---
def read_from_port():
    """
    Seri porttan gelen verileri sÃ¼rekli okur ve iÅŸler.
    """
    global ser
    while ser and ser.is_open:
        try:
            # Gelen veriyi satÄ±r satÄ±r oku. readline() satÄ±r sonu karakteri (Ã¶rn. \n, \r\n) bekler.
            # timeout ayarÄ± sayesinde bloklamaz, belirli bir sÃ¼re bekler.
            line = ser.readline().decode('utf-8').strip()
            if line: # EÄŸer boÅŸ bir satÄ±r deÄŸilse iÅŸlem yap
                try:
                    # Gelen veriyi XBeePackage olarak Ã§Ã¶zmeyi dene
                    received_package = XBeePackage.from_bytes(line.encode('utf-8'))
                    print(f"\n<<< Paket AlÄ±ndÄ± >>>")
                    print(f"  Tip: {received_package.package_type}")
                    print(f"  GÃ¶nderen: {received_package.sender}")
                    if received_package.params:
                        print(f"  Parametreler: {received_package.params}")
                    with queue_lock:
                        signal_queue.append((time.time(), 'IN', received_package.to_json()))
                except (json.JSONDecodeError, UnicodeDecodeError) as e:
                    # EÄŸer JSON veya UTF-8 olarak Ã§Ã¶zÃ¼lemezse ham metin/bayt olarak gÃ¶ster
                    print(f"\n<<< Ham Metin Verisi AlÄ±ndÄ± >>>")
                    print(f"  Veri: {line} (Hata: {e})")
                    with queue_lock:
                        signal_queue.append((time.time(), 'IN', line))
        except serial.SerialException as e:
            print(f"Hata: Seri port okuma hatasÄ±: {e}")
            break # Hata durumunda okuma dÃ¶ngÃ¼sÃ¼nden Ã§Ä±k
        except Exception as e:
            print(f"Beklenmedik bir hata oluÅŸtu okurken: {e}")
        time.sleep(0.01) # CPU kullanÄ±mÄ±nÄ± azaltmak iÃ§in kÄ±sa bir bekleme

# --- Veri GÃ¶nderme Fonksiyonu (AyrÄ± bir thread'de Ã§alÄ±ÅŸÄ±r) ---
def write_to_port():
    """
    Belirli aralÄ±klarla XBeePackage oluÅŸturup seri porttan gÃ¶nderir.
    """
    global ser
    while ser and ser.is_open:
        try:
            # HANDSHAKE paketi oluÅŸtur
            handshake_package = XBeePackage(
                package_type="G",
                sender="1", # GÃ¶nderen dronun ID'si
                params={"status": "online", "time": int(time.time())}
            )
            data_to_send = bytes(handshake_package)
            
            # AT modunda, veriyi doÄŸrudan seri porta yazÄ±n.
            # KarÅŸÄ± cihazÄ±n okuyabilmesi iÃ§in satÄ±r sonu karakteri (\r\n) ekliyoruz.
            ser.write(data_to_send + b'\r\n') 
            print("ğŸ“¡ Mesaj gÃ¶nderildi.")

            with queue_lock:
                signal_queue.append((time.time(), 'OUT', handshake_package.to_json()))
        except serial.SerialException as e:
            print(f"Hata: Seri port yazma hatasÄ±: {e}")
            break # Hata durumunda yazma dÃ¶ngÃ¼sÃ¼nden Ã§Ä±k
        except Exception as e:
            print(f"Beklenmedik bir hata oluÅŸtu gÃ¶nderirken: {e}")
        time.sleep(SEND_INTERVAL) # Global SEND_INTERVAL deÄŸiÅŸkeni kullanÄ±ldÄ±

# --- Kuyruk Temizleyici Fonksiyonu (AyrÄ± bir thread'de Ã§alÄ±ÅŸÄ±r) ---
def queue_cleaner_function():
    """
    Belirli bir sÃ¼reden eski kuyruk Ã¶ÄŸelerini temizler.
    """
    while True:
        now = time.time()
        with queue_lock:
            # Global QUEUE_RETENTION deÄŸiÅŸkeni kullanÄ±ldÄ±
            while signal_queue and now - signal_queue[0][0] > QUEUE_RETENTION: 
                signal_queue.popleft()
        time.sleep(1)

# --- Ana Program AkÄ±ÅŸÄ± ---
if __name__ == '__main__':
    print('XBee baÄŸlantÄ±sÄ± iÃ§in port girin')
    if platform.system() == 'Windows':
        input_user = "COM"+str(input('COM? :'))
    elif platform.system() == 'Linux':
        input_user = "/dev/"+str(input('/dev/? :'))
    else:
        input_user = str(input(' :'))
    
    port_to_use = input_user

    try:
        # pyserial ile seri portu aÃ§
        # timeout=0.5: readline() metodu iÃ§in bir bekleme sÃ¼resi ayarlar, bÃ¶ylece sÃ¼rekli bloklamaz.
        ser = serial.Serial(port_to_use, DEFAULT_BAUD_RATE, timeout=0.5) 
        print(f"Seri port '{port_to_use}' baÅŸarÄ±yla aÃ§Ä±ldÄ± (Baud: {DEFAULT_BAUD_RATE}).")

        # Okuma thread'ini baÅŸlat
        read_thread = threading.Thread(target=read_from_port, daemon=True)
        read_thread.start()

        # Yazma thread'ini baÅŸlat
        write_thread = threading.Thread(target=write_to_port, daemon=True)
        write_thread.start()

        # Kuyruk temizleyici thread'ini baÅŸlat
        cleaner_thread = threading.Thread(target=queue_cleaner_function, daemon=True)
        cleaner_thread.start()

        input("Ã‡Ä±kmak iÃ§in Enter'a basÄ±n...\n") # Ana thread'i aÃ§Ä±k tutar

    except serial.SerialException as e:
        print(f"Hata: Seri porta baÄŸlanÄ±lamadÄ±: {e}")
        print("LÃ¼tfen portun doÄŸru olduÄŸundan ve boÅŸta olduÄŸundan emin olun.")
    except Exception as e:
        print(f"Beklenmedik bir hata oluÅŸtu: {e}")
    finally:
        # Program sonlandÄ±ÄŸÄ±nda seri portu kapat
        if ser and ser.is_open:
            ser.close()
            print("ğŸ”Œ Seri port kapatÄ±ldÄ±.")